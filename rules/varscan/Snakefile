# from scripts.reports import report_exome_coverage
# from scripts.parse_samplesheet import parse_samplesheet, get_sample_names
# from scripts.utils import exclude_sample


rule varscan_mpileup:
    # Preprocessing to do a realignment of the reads with GATK
    # make me independent of runs, such that split trios can be automatically obtained!
    input:
        # bam=rules.remove_pcr_duplicates.output.bam,
        # bai=rules.remove_pcr_duplicates.output.bai,
        # gatkpackage="%s%sgatk-3.5.tar.bz2" % (config['dirs']['prefix'], config['dirs']['references']),
        patient="{prefix}%s%s/{run,[^/]+XX}/{trio}%s.reCal.reAl.nodup.srt.bam" % (config['dirs']['intermediate'], config['stepnames']['gatk_PrintReads'], '_S17'),
        father="{prefix}%s%s/{run,[^/]+XX}/{trio}%s.reCal.reAl.nodup.srt.bam" % (config['dirs']['intermediate'], config['stepnames']['gatk_PrintReads'], '_a_S18'),
        mother="{prefix}%s%s/{run,[^/]+XX}/{trio}%s.reCal.reAl.nodup.srt.bam" % (config['dirs']['intermediate'], config['stepnames']['gatk_PrintReads'], '_b_S19'),
        exometrack="%s%sAgilent_SureSelect_V5plusUTR.bed" % (config['dirs']['prefix'], config['dirs']['references']),
        reference="%s%shGRC37.fa" % (config['dirs']['prefix'], config['dirs']['references']),
        reference_fai="%s%shGRC37.fa.fai" % (config['dirs']['prefix'], config['dirs']['references']),
        reference_dict="%s%shGRC37.dict" % (config['dirs']['prefix'], config['dirs']['references']),
        # knownsA="%s%sMills_and_1000G_gold_standard.indels.b37.vcf" % (config['dirs']['prefix'], config['dirs']['references']),
        # knownsB="%s%s1000G_phase1.indels.b37.vcf" % (config['dirs']['prefix'], config['dirs']['references'])
    output:
        indel="{prefix}%s%s/{run,[^/]+XX}/{trio}.indel.vcf" % (config['dirs']['intermediate'], config['stepnames']['varscan_mpileup']),
        snp="{prefix}%s%s/{run,[^/]+XX}/{trio}.snp.vcf" % (config['dirs']['intermediate'], config['stepnames']['varscan_mpileup']),
    benchmark:
        "{prefix}%s{run}/{trio}.%s.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['varscan_mpileup'])
    log:
        "{prefix}%s{run}/{trio}.%s.log" % (config['dirs']['logs'], config['stepnames']['varscan_mpileup'])
    conda:
        "envs/spike_varscan.yaml"
    threads:
        3
    shell:
        "samtools"
        " mpileup"
        " -B "
        " -q 1"
        " -f {input.reference}"
        " -l {input.exometrack}"
        " {input.father}"
        " {input.mother}"
        " {input.patient}"
        " | java"
        " -Xmx3g"
        " -XX:ParallelGCThreads={threads}"
        " -jar $CONDA_PREFIX/share/varscan-2.4.3-1/VarScan.jar"
        " trio"
        " - {output}"
        " --min-coverage 10"
        " --min-var-freq 0.20"
        " --p-value 0.05"
        " -adj-var-freq 0.05"
        " -adj-p-value 0.15"
        " 2>> {log}"

        # ##################################
        # # STEP PRODUCING MPILEUP FOR TRIOS
        # ##################################
        # echo launching mpileup and passing to varscanfor $OUTPUTBASENAME
        # # $EXOME_TRACK is set in common.env
        # /data/biotools/src/samtools-1.3/samtools mpileup -B -q 1 -f $REF -l $EXOME_TRACK $FATHER_BAM $MOTHER_BAM $CHILD_BAM |java -Xmx3g -XX:ParallelGCThreads=1 -Djava.io.tmpdir=$TEMPPATH \
        # -jar $VARSCAN2JAR trio - $OUTPUTBASENAME --min-coverage 10 --min-var-freq 0.20 --p-value 0.05 -adj-var-freq 0.05 -adj-p-value 0.15
