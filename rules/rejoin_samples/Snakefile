# DNA material of a sample might be split and loaded into several lanes to
# increase coverage. We here use information from SampleSheet and merge fastq.gz
# files from demultiplexing if necessary, otherwise we just use soft links

def get_sample_sequences(sample, samplesheets, config):
    res = []
    for _, row in samplesheets[samplesheets['fastq-prefix'] == sample].iterrows():
        res.append('%s/%s_L%03i' % (row['run'], sample, row['Lane']))
    return res

rule rejoin_sample:
    input:
        lambda wildcards: ["%s%s%s/%s_%s_001.fastq.gz" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['demultiplex'], fastq, wildcards.direction) for fastq in get_sample_sequences(wildcards.sample, SAMPLESHEETS, config)]
    output:
        "{prefix}%s%s/{sample, .*?}_{direction,R[1|2]}.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['rejoin_samples'])
    benchmark:
        "{prefix}%s{sample}_{direction}.benchmark" % config['dirs']['benchmarks']
    log:
        "{prefix}%s{sample}_{direction}.log" % config['dirs']['logs']
    threads:
        1
    shell:
        'if [[ $(echo "{input}" | wc -w) -gt 1 ]]; then '
        # you can just concatenate multiple *.gz files into one, while
        # content when decompressed remains the same!
        'cat {input} > {output} 2> {log};'
        'else '
        'cp -l -v {input} {output} 2> {log}; '
        'chmod u+w {output} 2>> {log}; '
        'fi; '
