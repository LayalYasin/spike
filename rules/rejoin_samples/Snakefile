# DNA material of a sample might be split and loaded into several lanes to
# increase coverage. We here use information from SampleSheet and merge fastq.gz
# files from demultiplexing if necessary, otherwise we just use soft links

rule rejoin_sample:
    input:
        lambda wildcards: ["%s%s%s/%s" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['demultiplex'], run) for run in set(map(lambda x: x.split('/')[0], get_rejoin_fastqs(wildcards.sample, SAMPLESHEETS, config)))]
    output:
        "{prefix}%s%s/{sample, .*?}_{direction,R[1|2]}.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['rejoin_samples'])
    log:
        "{prefix}%s%s.{sample}_{direction}.log" % (config['dirs']['logs'], config['stepnames']['rejoin_samples'])
    benchmark:
        "{prefix}%s%s.{sample}_{direction}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['rejoin_samples'])
    threads:
        1
    params:
        single_fastqs=lambda wildcards: ["%s%s%s/%s_%s_001.fastq.gz" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['demultiplex'], fastq, wildcards.direction) for fastq in get_rejoin_fastqs(wildcards.sample, SAMPLESHEETS, config)]
    shell:
        'if [[ $(echo "{params.single_fastqs}" | wc -w) -gt 1 ]]; then '
        # you can just concatenate multiple *.gz files into one, while
        # content when decompressed remains the same!
        'cat {params.single_fastqs} > {output} 2> {log};'
        'else '
        'cp -l -v {params.single_fastqs} {output} 2> {log}; '
        'chmod u+w {output} 2>> {log}; '
        'fi; '
