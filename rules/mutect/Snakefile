rule mutect:
    # Preprocessing to do a realignment of the reads with GATK
    input:
        knownsDBSNP138="%s%sdbsnp_138.b37.vcf" % (config['dirs']['prefix'], config['dirs']['references']),
        exometrack="%s%sAgilent_SureSelect_V5plusUTR.bed" % (config['dirs']['prefix'], config['dirs']['references']),
        references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(wildcards.entity, config), ending) for ending in ['', '.fai', '.dict']],
        gatkpackage="%s%sgatk-3.5.tar.bz2" % (config['dirs']['prefix'], config['dirs']['references']),
        mutect117="%s%smutect-1.1.7.jar" % (config['dirs']['prefix'], config['dirs']['references']),
        cosmic="%s%sCosmicCodingMuts_v63_300113.vcf" % (config['dirs']['prefix'], config['dirs']['references']),
        cosmicvcf="%s%sCosmicCodingMuts_v63_300113.vcf.idx" % (config['dirs']['prefix'], config['dirs']['references']),
        tumor=lambda wildcards: "%s%s%s/%s.reCal.reAl.nodup.srt.bam" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['gatk_PrintReads'], get_role(wildcards.entity.split('/')[0], wildcards.entity.split('/')[-1], 'tumor', config)),
        healthy=lambda wildcards: "%s%s%s/%s.reCal.reAl.nodup.srt.bam" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['gatk_PrintReads'], get_role(wildcards.entity.split('/')[0], wildcards.entity.split('/')[-1], 'healthy', config)),
    output:
        csv="{prefix}%s%s/{entity}.all_calls.csv" % (config['dirs']['intermediate'], config['stepnames']['mutect']),
        vcf="{prefix}%s%s/{entity}.all_calls.vcf" % (config['dirs']['intermediate'], config['stepnames']['mutect']),
    benchmark:
        "{prefix}%s{entity}.%s.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['mutect'])
    log:
        mutect="{prefix}%s{entity}.%s.mutect.log" % (config['dirs']['logs'], config['stepnames']['mutect']),
        post="{prefix}%s{entity}.%s.post.log" % (config['dirs']['logs'], config['stepnames']['mutect']),
    conda:
        "envs/spike_mutect.yaml"
    threads:
        1
    shell:
        'if [ $(gatk-register > /dev/null; echo "$?") -eq 1 ]; then rm -rf /tmp/gatk; gatk-register {input.gatkpackage} 2>> {log.mutect}; fi; '
        "java"
        " -Xmx6g -XX:ParallelGCThreads={threads}"
        " -jar {input.mutect117}"
        " --analysis_type MuTect"
        " --reference_sequence {input.references[0]}"
        " --dbsnp {input.knownsDBSNP138}"
        " --cosmic {input.cosmic}"
        " --intervals {input.exometrack}"
        " --input_file:normal {input.healthy}"
        " --input_file:tumor {input.tumor}"
        " --out {output.csv}"
        " --vcf {output.vcf}"
        " 2> {log.mutect}"
        " && grep"
        " -v REJECT"
        " {output.csv}"
        " > {output.csv}_KEEP_only.csv"
        " 2> {log.post}"
        " && grep"
        " -v REJECT"
        " {output.vcf}"
        " > {output.vcf}_KEEP_only.csv"
        " 2>> {log.post}"
        " && gzip {output.csv}"
        " 2>> {log.post}"
        " && bgzip {output.vcf}"
        " && tabix -p vcf {output.vcf}.gz"
        " 2>> {log.post}"

        # COMMAND="/opt/Oracle_Java/jre1.7.0_51/bin/java $GATK_OPTS -jar $MUTECTJAR \
        # --analysis_type MuTect \
        # --reference_sequence $REF \
        # --dbsnp $DBSNP \
        # --cosmic $GATKRES_PATH/CosmicCodingMuts_v63_300113.vcf \
        # --intervals $EXOME_TRACK \
        # --input_file:normal $NORMAL_BAM \
        # --input_file:tumor $TUMOR_BAM \
        # --out $OUTPUT.all_calls.csv \
        # --vcf $OUTPUT.all_calls.vcf \
        #  && (grep -v REJECT $OUTPUT.all_calls.csv > ${OUTPUT}_KEEP_only.csv; grep -v REJECT $OUTPUT.all_calls.vcf > ${OUTPUT}_KEEP_only.vcf; gzip $OUTPUT.all_calls.csv; vcfzipNindex.sh $OUTPUT.vcf)"
        # ### other parameters that I currently do not use:
        # #--coverage_file $OUTPUT.mutect.coverage.wig.txt # these are just big files that we currently do not use
        # #--fraction_contamination 0.02 \ # read this in a forum but dont know if this is suitable for us
        # # --only_passing_calls \ # I do something comparable with "grep -v REJECT"
        # # I did not use threading, see below, because I suspect this to be the cause for mutect no not finish properly
        # # --num_threads 4 \
