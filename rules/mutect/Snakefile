# from scripts.reports import report_exome_coverage
# from scripts.parse_samplesheet import parse_samplesheet, get_sample_names
# from scripts.utils import exclude_sample


rule mutect:
    # Preprocessing to do a realignment of the reads with GATK
    input:
        rules.gatk_RealignerTargetCreator.input.exometrack,
        rules.gatk_RealignerTargetCreator.input.reference,
        # tumor=lambda wildcards: "%s%s%s/%s.pileup.gz" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['samtools_mpileup'], get_role(wildcards.entity.split('/')[0], wildcards.entity.split('/')[-1], 'tumor', config)),
        # healthy=lambda wildcards: "%s%s%s/%s.pileup.gz" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['samtools_mpileup'], get_role(wildcards.entity.split('/')[0], wildcards.entity.split('/')[-1], 'healthy', config)),
    output:
        pileup="{prefix}%s%s/{entity}.all_calls.csv" % (config['dirs']['intermediate'], config['stepnames']['mutect']),
    benchmark:
        "{prefix}%s{entity}.%s.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['mutect'])
    log:
        mutect="{prefix}%s{entity}.%s.mutect.log" % (config['dirs']['logs'], config['stepnames']['mutect']),
        # pigz="{prefix}%s{entity}.%s.pigz.log" % (config['dirs']['logs'], config['stepnames']['samtools_mpileup'])
    conda:
        "envs/spike_mutect.yaml"
    threads:
        1
    shell:
        "java"
        " -Xmx6g -XX:ParallelGCThreads={threads}"
        " -jar $CONDA_PREFIX/opt/gatk-3.5/GenomeAnalysisTK.jar"

        # "samtools"
        # " mpileup"
        # " -C50 "
        # " -Q20"
        # " -f {rules.gatk_RealignerTargetCreator.input.reference}"
        # " -l {rules.gatk_RealignerTargetCreator.input.exometrack}"
        # " 2> {log.samtools}"
        # " | pigz"
        # " > {output}"
        # " 2> {log.pigz}"

        # COMMAND="/opt/Oracle_Java/jre1.7.0_51/bin/java $GATK_OPTS -jar $MUTECTJAR \
        # --analysis_type MuTect \
        # --reference_sequence $REF \
        # --dbsnp $DBSNP \
        # --cosmic $GATKRES_PATH/CosmicCodingMuts_v63_300113.vcf \
        # --intervals $EXOME_TRACK \
        # --input_file:normal $NORMAL_BAM \
        # --input_file:tumor $TUMOR_BAM \
        # --out $OUTPUT.all_calls.csv \
        # --vcf $OUTPUT.all_calls.vcf \
        #  && (grep -v REJECT $OUTPUT.all_calls.csv > ${OUTPUT}_KEEP_only.csv; grep -v REJECT $OUTPUT.all_calls.vcf > ${OUTPUT}_KEEP_only.vcf; gzip $OUTPUT.all_calls.csv; vcfzipNindex.sh $OUTPUT.vcf)"
        # ### other parameters that I currently do not use:
        # #--coverage_file $OUTPUT.mutect.coverage.wig.txt # these are just big files that we currently do not use
        # #--fraction_contamination 0.02 \ # read this in a forum but dont know if this is suitable for us
        # # --only_passing_calls \ # I do something comparable with "grep -v REJECT"
        # # I did not use threading, see below, because I suspect this to be the cause for mutect no not finish properly
        # # --num_threads 4 \
