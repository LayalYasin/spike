rule check_complete:
    input:
        "{prefix}%s%s{run}/RTAComplete.txt" % (config['dirs']['inputs'], config['dirs']['rawillumina'])
    output:
        fp_check="{prefix}%s%s-{run}-illuminarun_complete.txt" % (config['dirs']['checks'], config['stepnames']['demultiplex'])
    log:
        "{prefix}%s%s/{run}.log" % (config['dirs']['logs'], config['stepnames']['check_complete'])
    benchmark:
        "{prefix}%s%s/{run}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['check_complete'])
    run:
        with open(output.fp_check, 'w') as f:
            f.write("Raw Illumina data from run are complete.\n")


rule demultiplex:
    input:
        status="{prefix}%s%s-{run}-illuminarun_complete.txt" % (config['dirs']['checks'], config['stepnames']['demultiplex']),
        raw="{prefix}%s%s{run}" % (config['dirs']['inputs'], config['dirs']['rawillumina']),
        samplesheet="{prefix}%s%s{run}_spike.csv" % (config['dirs']['inputs'], config['dirs']['samplesheets']),
    output:
        fastqs=directory("{prefix}%s%s/{run}" % (config['dirs']['intermediate'], config['stepnames']['demultiplex'])),
    log:
        "{prefix}%s%s/{run}.log" % (config['dirs']['logs'], config['stepnames']['demultiplex'])
    benchmark:
        "{prefix}%s%s/{run}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['demultiplex'])
    threads:
        config['num_threads']
    conda:
        "envs/spike_demux.yaml"
    shell:
        "uname -a > {log} 2>&1 &&"
        "bcl2fastq"
        " --runfolder-dir {input.raw}/"
        " --output-dir {output.fastqs}/"
        " --ignore-missing-bcls"
        " --sample-sheet {input.samplesheet}"
        " --loading-threads {threads}"
        " --processing-threads {threads}"
        " --writing-threads {threads}"
        " 2>> {log}"
        " 1>&2"
        # rename demux fastq files such that S\d+ are removed from filenames
        ' && for f in `find {output.fastqs}/ -name "*.fastq.gz"`; do fnoS=`echo "$f" | sed -r "s/_S[0-9]+_/_/"`; mv -v $f $fnoS 2>> {log} >&2; done'
        ' && cp -l -v {output.fastqs}/Reports/html/*/all/all/all/laneBarcode.html {output.fastqs}/laneBarcode.html 2>> {log} >&2'


rule aggregate_undetermined_filesizes:
    input:
        "{prefix}%s%s/{run}" % (config['dirs']['intermediate'], config['stepnames']['demultiplex'])
    output:
        sizes="{prefix}%sUndeterminedFilesizes/{run}.txt" % (config['dirs']['aggregation']),
        fp_check="{prefix}%s%s-{run}-aggregate_undetermined_filesizes.txt" % (config['dirs']['checks'], config['stepnames']['demultiplex'])
    log:
        "{prefix}%s%s/{run}.log" % (config['dirs']['logs'], config['stepnames']['aggregate_undetermined_filesizes'])
    benchmark:
        "{prefix}%s%s/{run}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['aggregate_undetermined_filesizes'])
    params:
        fps_undertermined="{prefix}%s%s/{run}/Undetermined_L*_001.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['demultiplex'])
    shell:
        "stat -c '%s\t%n\tunknown' {params.fps_undertermined} > {output.sizes} && "
        "echo 'done.' > {output.fp_check}"


rule check_undetermined_filesizes:
    input:
        "{prefix}%sUndeterminedFilesizes/{run}.txt" % (config['dirs']['aggregation'])
    output:
        "{prefix}%s{run}/{run}.undetermined-filesizes.pdf" % (config['dirs']['reports'])
    log:
        "{prefix}%s%s/{run}.log" % (config['dirs']['logs'], config['stepnames']['check_undetermined_filesizes'])
    benchmark:
        "{prefix}%s%s/{run}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['check_undetermined_filesizes'])
    run:
        report_undertermined_filesizes(input[0], output[0], os.path.join(wildcards.prefix, config['dirs']['reports'], wildcards.run, 'error_undetermined-filesizes.pdf'))


rule convert_illumina_report:
    input:
        rules.demultiplex.output.fastqs,
        undetermined=rules.check_undetermined_filesizes.output
    output:
        "{prefix}%s{run}/{run}.yield_report.pdf" % (config['dirs']['reports'])
    log:
        "{prefix}%s%s/{run}.log" % (config['dirs']['logs'], config['stepnames']['convert_illumina_report'])
    benchmark:
        "{prefix}%s%s/{run}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['convert_illumina_report'])
    conda:
        "envs/spike_report.yaml"
    params:
        yield_report=lambda wildcards: "%s%s%s/%s/Reports/html/%s/all/all/all/laneBarcode.html" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['demultiplex'], wildcards.run, wildcards.run.split('_')[-1][1:]),
        firstbase="{prefix}%s%s{run}/First_Base_Report.htm" % (config['dirs']['inputs'], config['dirs']['rawillumina']),
    shell:
        "wkhtmltopdf --orientation Landscape {params.yield_report} {output} 2> {log} &&"
        "echo 'Hi there,\n\n"
        "this is an automated message from {config[name_program]}.\n\n"
        "Demultiplexing for the flowcell mentioned in the subject line finished. Please find attached the yield report, some statistics about the file sizes of undetermined reads and the first base report.\n\n"
        "Have a nice day!' | mail -s '[{config[name_program]}] demultiplex report {wildcards.run}' {config[mail_attachment_parameter]} {output} {config[mail_attachment_parameter]} {input.undetermined} {config[mail_attachment_parameter]} {params.firstbase} {config[emails][demultiplexreport]}"
        " 2>> {log}"
