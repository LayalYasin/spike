rule check_complete:
    input:
        "{prefix}%s%s{run}/RTAComplete.txt" % (config['dirs']['inputs'], config['dirs']['rawillumina'])
    output:
        fp_check="{prefix}%s%s/{run}.complete.txt" % (config['dirs']['intermediate'], config['stepnames']['check_complete'])
    log:
        "{prefix}%s%s/{run}.log" % (config['dirs']['logs'], config['stepnames']['check_complete'])
    benchmark:
        "{prefix}%s%s/{run}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['check_complete'])
    run:
        with open(output.fp_check, 'w') as f:
            f.write("Raw Illumina data from run are complete.\n")


rule split_demultiplex:
    output:
        "{prefix}%s%s/{run}/samplesheet_{part}.csv" % (config['dirs']['intermediate'], config['stepnames']['split_demultiplex'])
    log:
        "{prefix}%s%s/{run}_{part}.log" % (config['dirs']['logs'], config['stepnames']['split_demultiplex'])
    benchmark:
        "{prefix}%s%s/{run}_{part}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['split_demultiplex'])
    threads:
        1
    run:
        split_samplesheets(SAMPLESHEETS[SAMPLESHEETS['run'] == wildcards.run], config, dry=False)


rule demultiplex:
    input:
        status="{prefix}%s%s/{run}.complete.txt" % (config['dirs']['intermediate'], config['stepnames']['check_complete']),
        samplesheet="{prefix}%s%s/{run}/samplesheet_{part}.csv" % (config['dirs']['intermediate'], config['stepnames']['split_demultiplex']),
        raw=directory("{prefix}%s%s{run}" % (config['dirs']['inputs'], config['dirs']['rawillumina'])),
    output:
        directory("{prefix}%s%s/{run}/{part}" % (config['dirs']['intermediate'], config['stepnames']['demultiplex'])),
    log:
        "{prefix}%s%s/{run}_{part}.log" % (config['dirs']['logs'], config['stepnames']['demultiplex'])
    benchmark:
        "{prefix}%s%s/{run}_{part}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['demultiplex'])
    threads:
        16
    conda:
        "envs/spike_demux.yaml"
    shell:
        "uname -a > {log} 2>&1 &&"
        "bcl2fastq"
        " --runfolder-dir {input.raw}/"
        " --output-dir {output}/"
        " --ignore-missing-bcls"
        " --sample-sheet {input.samplesheet}"
        " --loading-threads {threads}"
        " --processing-threads {threads}"
        " --writing-threads {threads}"
        " 2>> {log}"
        " 1>&2"


rule join_demultiplex:
    input:
        #samplesheets=lambda wildcards: ["%s%s%s/%s/samplesheet_part_%i.csv" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['split_demultiplex'], wildcards.run, p+1) for p in range(split_samplesheets(SAMPLESHEETS[SAMPLESHEETS['run'] == wildcards.run], config, dry=True))],
        demux_dirs=lambda wildcards: ["%s%s%s/%s/part_%i" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['demultiplex'], wildcards.run, p+1) for p in range(split_samplesheets(SAMPLESHEETS[SAMPLESHEETS['run'] == wildcards.run], config, dry=True))],
    output:
        directory("{prefix}%s%s/{run}" % (config['dirs']['intermediate'], config['stepnames']['join_demultiplex']))
    log:
        "{prefix}%s%s/{run}.log" % (config['dirs']['logs'], config['stepnames']['join_demultiplex'])
    benchmark:
        "{prefix}%s%s/{run}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['join_demultiplex'])
    threads:
        1
    run:
        for i in input.samplesheets:
            print("Hallo Welt", i)
        # # rename demux fastq files such that S\d+ are removed from filenames
        # ' && for f in `find {output}/ -name "*.fastq.gz"`; do fnoS=`echo "$f" | sed -r "s/_S[0-9]+_/_/"`; mv -v $f $fnoS 2>> {log} >&2; done'
        # ' && cp -l -v {output}/Reports/html/*/all/all/all/laneBarcode.html {output}/laneBarcode.html 2>> {log} >&2'




rule aggregate_undetermined_filesizes:
    input:
        directory("{prefix}%s%s/{run}" % (config['dirs']['intermediate'], config['stepnames']['demultiplex']))
    output:
        sizes="{prefix}%s%s/{run}.undetermined_filesizes.txt" % (config['dirs']['intermediate'], config['stepnames']['aggregate_undetermined_filesizes']),
        fp_check="{prefix}%s%s/{run}.checked.txt" % (config['dirs']['intermediate'], config['stepnames']['aggregate_undetermined_filesizes'])
    log:
        "{prefix}%s%s/{run}.log" % (config['dirs']['logs'], config['stepnames']['aggregate_undetermined_filesizes'])
    benchmark:
        "{prefix}%s%s/{run}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['aggregate_undetermined_filesizes'])
    params:
        fps_undertermined="{prefix}%s%s/{run}/Undetermined_L*_001.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['demultiplex'])
    shell:
        "stat -c '%s\t%n\tunknown' {params.fps_undertermined} > {output.sizes} && "
        "echo 'done.' > {output.fp_check}"


rule check_undetermined_filesizes:
    input:
        "{prefix}%s%s/{run}.undetermined_filesizes.txt" % (config['dirs']['intermediate'], config['stepnames']['aggregate_undetermined_filesizes'])
    output:
        "{prefix}%s%s/{run}.undetermined-filesizes.pdf" % (config['dirs']['intermediate'], config['stepnames']['check_undetermined_filesizes'])
    log:
        "{prefix}%s%s/{run}.log" % (config['dirs']['logs'], config['stepnames']['check_undetermined_filesizes'])
    benchmark:
        "{prefix}%s%s/{run}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['check_undetermined_filesizes'])
    run:
        report_undertermined_filesizes(input[0], output[0], os.path.join(wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['check_undetermined_filesizes'], wildcards.run, 'error_undetermined-filesizes.pdf'))


rule convert_illumina_report:
    input:
        directory("{prefix}%s%s/{run}" % (config['dirs']['intermediate'], config['stepnames']['demultiplex'])),
    output:
        "{prefix}%s%s/{run}.yield_report.pdf" % (config['dirs']['intermediate'], config['stepnames']['convert_illumina_report'])
    log:
        "{prefix}%s%s/{run}.log" % (config['dirs']['logs'], config['stepnames']['convert_illumina_report'])
    benchmark:
        "{prefix}%s%s/{run}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['convert_illumina_report'])
    conda:
        "envs/spike_report.yaml"
    params:
        yield_report=lambda wildcards: "%s%s%s/%s/Reports/html/%s/all/all/all/laneBarcode.html" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['demultiplex'], wildcards.run, wildcards.run.split('_')[-1][1:]),
        firstbase="{prefix}%s%s{run}/First_Base_Report.htm" % (config['dirs']['inputs'], config['dirs']['rawillumina']),
        recipient=config['emails']['demultiplexreport'].split(',')[0],
        suggested_recipients='\n'.join(config['emails']['demultiplexreport'].split(',')[1:])
    shell:
        "wkhtmltopdf --orientation Landscape {params.yield_report} {output} 2> {log} &&"
        "echo 'suggested recipients:\n{params.suggested_recipients}\n\nHi there,\n\n"
        "this is an automated message from {config[name_program]}.\n\n"
        "Demultiplexing for flowcell {wildcards.run} finished. Please find attached the yield report and the first base report.\n\n"
        "Have a nice day!' | mail -s '[{config[name_program]}] demultiplex report {wildcards.run}' {config[mail_attachment_parameter]} {output} {config[mail_attachment_parameter]} {params.firstbase} {params.recipient}"
        " 2>> {log}"
